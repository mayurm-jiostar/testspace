name: YAML Validation and Key Path Extraction

on:
  pull_request:
    paths:
      - '**/*.yaml'
      - '**/*.yml'

jobs:
  validate-and-extract:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install pyyaml

    - name: List YAML files
      id: list_files
      run: |
        # Find all yaml files in the repository
        echo "Listing all YAML files in the repository:"
        find . -type f \( -name "*.yml" -o -name "*.yaml" \) -not -path "*/\.*" | tee yaml_files.txt
        
        # Get changed files - handle cases with no previous commits
        echo -e "\nListing changed YAML files:"
        if git rev-parse HEAD~1 >/dev/null 2>&1; then
          git diff --name-only HEAD~1 HEAD | grep -E '\.ya?ml$' || true > changed_yaml_files.txt
        else
          # If no previous commit exists, list all YAML files as changed
          find . -type f \( -name "*.yml" -o -name "*.yaml" \) -not -path "*/\.*" > changed_yaml_files.txt
        fi
        cat changed_yaml_files.txt

    - name: Validate YAML and extract keys
      id: validate_and_extract
      run: |
        COMMENT="### YAML Validation Status\n✅ All YAML files have been validated successfully.\n\n"
        
        if [ ! -s changed_yaml_files.txt ]; then
          echo "No changed YAML files."
          echo "comment=$COMMENT" >> $GITHUB_OUTPUT
          exit 0
        fi

        while IFS= read -r FILE; do
          if [ -f "$FILE" ]; then
            echo -e "\nValidating: $FILE"
            if python -c "import yaml, sys; yaml.safe_load(open('$FILE'))"; then
              echo "✅ YAML validation passed for $FILE"
              
              # Extract keys and their changes
              if git rev-parse HEAD~1 >/dev/null 2>&1; then
                OLD_FILE=$(git show HEAD~1:$FILE 2>/dev/null || echo "")
                if [ -n "$OLD_FILE" ]; then
                  echo "$OLD_FILE" > old_yaml.tmp
                  KEYS_DIFF=$(python .github/scripts/compare_yaml.py "$FILE" "old_yaml.tmp")
                else
                  KEYS_DIFF=$(python .github/scripts/compare_yaml.py "$FILE" "nonexistent.yml")
                fi
              else
                KEYS_DIFF=$(python .github/scripts/compare_yaml.py "$FILE" "nonexistent.yml")
              fi

              if [ -n "$KEYS_DIFF" ]; then
                COMMENT+="### Changed Keys in $FILE:\n\`\`\`diff\n$KEYS_DIFF\n\`\`\`\n\n"
              fi
              
              # Cleanup temporary file
              rm -f old_yaml.tmp
            else
              echo "❌ YAML validation failed for $FILE"
              exit 1
            fi
          fi
        done < changed_yaml_files.txt
        
        echo "comment<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Post comment to PR
      uses: actions/github-script@v6
      if: success()
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const comment = `${process.env.GITHUB_STEP_OUTPUT_COMMENT}`;
            if (comment && comment.trim()) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `**Welcome!** We look forward to reviewing your Pull Request shortly.\n\n${comment}`
              });
            }
          } catch (error) {
            console.error('Error posting comment:', error);
            throw error;
          }