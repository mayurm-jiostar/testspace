name: YAML Validation and Key Path Extraction

on:
  pull_request:
    paths:
      - '**/*.yaml'
      - '**/*.yml'

jobs:
  validate-and-extract:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install pyyaml

    - name: List YAML files
      id: list_files
      run: |
        # Find all yaml files in the repository
        echo "Listing all YAML files in the repository:"
        find . -type f \( -name "*.yml" -o -name "*.yaml" \) -not -path "*/\.*" | tee yaml_files.txt
        
        # Get changed files - handle cases with no previous commits
        echo -e "\nListing changed YAML files:"
        if git rev-parse HEAD~1 >/dev/null 2>&1; then
          git diff --name-only HEAD~1 HEAD | grep -E '\.ya?ml$' || true > changed_yaml_files.txt
        else
          # If no previous commit exists, list all YAML files as changed
          find . -type f \( -name "*.yml" -o -name "*.yaml" \) -not -path "*/\.*" > changed_yaml_files.txt
        fi
        cat changed_yaml_files.txt

    - name: Validate YAML and extract keys
      id: validate_and_extract
      run: |
        COMMENT=""
        if [ ! -s changed_yaml_files.txt ]; then
          echo "No changed YAML files."
          echo "comment=No YAML files were changed" >> $GITHUB_OUTPUT
          exit 0
        fi

        while IFS= read -r FILE; do
          if [ -f "$FILE" ]; then
            echo -e "\nValidating: $FILE"
            # Validate YAML
            if python -c "import yaml, sys; yaml.safe_load(open('$FILE'))"; then
              echo "✅ YAML validation passed for $FILE"
              # Extract content for new files or modified files
              if git rev-parse HEAD~1 >/dev/null 2>&1; then
                DIFF_CONTENT=$(git diff HEAD~1 HEAD -- "$FILE" | grep -E '^\+[^+]' | sed 's/^+//' || true)
              else
                # If no previous commit, show entire file content
                DIFF_CONTENT=$(cat "$FILE")
              fi
              if [ -n "$DIFF_CONTENT" ]; then
                COMMENT+="**$FILE**:\n\`\`\`yaml\n$DIFF_CONTENT\n\`\`\`\n\n"
              fi
            else
              echo "❌ YAML validation failed for $FILE"
              exit 1
            fi
          fi
        done < changed_yaml_files.txt
        
        echo "comment<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create commit status
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const message = process.env.message || process.env.INPUT_MESSAGE || (core.getInput('message') || '');
          if (message && message.trim()) {
            const status = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              description: 'YAML validation completed',
              context: 'YAML Validation'
            };
            await github.rest.repos.createCommitStatus(status);
          }
          
    - name: Post comment to PR
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const comment = process.env.comment || process.env.INPUT_COMMENT || (core.getInput('comment') || '');
          if (comment && comment.trim()) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Modified or Added Keys:\n${comment}`
            });
          }
